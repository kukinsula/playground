* config

# Définir son identité
git config --global user.name "John Doe"
git config --global user.email "john@example.com"

# Spécifier l'éditeur emcas lancé dans le terminal
git config --global core.editor "emacs -nw"

# Afficher la config actuelle
git config -l

* remote

# Remotes
git remote -v

# Changer l'URL de la remote origin
git remote set-url origin http//github.com/repo.git

# Ajouter la remote foo
git remote add foo https://github.com/user/repo.git

# Supprimer la remote foo
git remote remove foo

# Renommer la remote foo en bar
git remote rename foo bar

* diff

# Différence entre le présent et le commit COMMIT_ID
git diff HEAD COMMIT_ID
# ou
git diff COMMIT_ID

# Différence entre deux commits
git diff COMMIT1_ID COMMIT2_ID

# Nom des fchiers modifiés entre deux commits
git diff --name-only COMMIT1_ID COMMIT2_ID

# Détails d'un commit
git show COMMIT_ID

# Différence des fichiers ajoutés (staged)
git diff --staged

# Différence entre l'état courant et la branche foo
git diff foo

# Différence du fichier toto.txt
git diff toto.txt

* log

** Index

# Logs des deux derniers commits
git log -2

# Historique des deux derniers commits
git log -p -2

** Individu

# Logs d'une personne
# NB : l'author et le committer ne sont pas toujours la même personne
git log --author <name>
git log --commiter <name>

# Logs de tous ceux dont l'auteur contient "Bob"
git log --author=Bob

** Date

# Logs avant/après le 31 décembre 2017 (format "YYYY-mm-dd")
git log --before "2017-12-31"
git log --after "2017-12-31"

# Logs entre le 2017-01-01 et le 2017-02-02
git log --after "2017-01-01" --before "2017-02-02"

# Logs avant/après deux jours (format Ruby)
git log --before 2.days.ago
git log --after 2.days.ago

** Divers

# Logs et leurs différences
git log -p

# Statistiques de tous les logs
git log --stat

#  Logs chacun sur une ligne
git log --oneline

#  Logs avec un format personalisé
git log --pretty=format:"Commit Hash: %H, Author: %aN, Date: %aD"

* commit

* branch

# Branches (-a pour toutes les branches)
git branch [-a]

# Créer la branche foo depuis la branche où l'on se trouve
git branch foo
# ou
git checkout -b foo

# Après la création de la branche foo, il faut définir son upstream
# NB : permet de taper 'git push' tout court, plutôt que 'git push origin master'
git push --set-upstream origin foo

# Aller dans la branche foo
git checkout foo

# Historique des commit entre la branche courante et master
git cherry -v master

# Supprimer la branche foo
git branch -d foo

# Pusher la branche foo
git push origin foo

# Récupérer toutes les branches
git fetch origin

* reset

# Annuler le dernier commit local EN préservant les changements
git reset --soft HEAD~1

# Annuler le dernier commit local SANS préserver les changements
git reset --hard HEAD~1

# Annuler des fichiers ajoutés
git reset HEAD file.txt

* divers

git status

git add file

git commit

git pull --rebase

git push [ remote branch ]

git stash

git stash pop
